# -*- coding: utf-8 -*-
"""IndoorNavigation_ActionAndDirection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13KzgRuzlC0hH5k8qj_WD-poIkiqNvcno
"""

import numpy as np
import pandas as pd

def generate_sensor_data(num_samples):
    data = {
        'Gyroscope X (rad/s)': np.random.uniform(-1, 1, size=num_samples),
        'Gyroscope Y (rad/s)': np.random.uniform(-1, 1, size=num_samples),
        'Gyroscope Z (rad/s)': np.random.uniform(-1, 1, size=num_samples),
        'Accelerometer X (m/s^2)': np.random.uniform(0, 10, size=num_samples),
        'Accelerometer Y (m/s^2)': np.random.uniform(0, 10, size=num_samples),
        'Accelerometer Z (m/s^2)': np.random.uniform(0, 10, size=num_samples),
        'Magnetometer X (μT)': np.random.uniform(0, 1, size=num_samples),
        'Magnetometer Y (μT)': np.random.uniform(0, 1, size=num_samples),
        'Magnetometer Z (μT)': np.random.uniform(0, 1, size=num_samples),
        'Activity': np.random.choice(['Walking', 'Standing'], size=num_samples, p=[0.9, 0.1])
    }
    return pd.DataFrame(data)
num_samples = 1500
sensor_data = generate_sensor_data(num_samples)
sensor_data.to_csv('sensor_data.csv', index=False)

sensor_data

# Separate the dataset into gyroscope, accelerometer, and magnetometer data
gyroscope_data = sensor_data.iloc[:, :3].values
accelerometer_data = sensor_data.iloc[:, 3:6].values
magnetometer_data = sensor_data.iloc[:, 6:-1].values

def determine_activity(gyroscope_data, accelerometer_data, magnetometer_data):
    # Calculate magnitude of acceleration vector
    acceleration_magnitude = np.linalg.norm(accelerometer_data)

    # Determine activity based on magnitude of acceleration
    if acceleration_magnitude < 1.5:
        activity = "Standing"
    else:
        activity = "Walking"

    # Calculate direction of movement using gyroscope and magnetometer data
    x_rotation = np.arctan2(accelerometer_data[0], np.sqrt(accelerometer_data[1]**2 + accelerometer_data[2]**2))
    y_rotation = np.arctan2(accelerometer_data[1], np.sqrt(accelerometer_data[0]**2 + accelerometer_data[2]**2))
    z_rotation = np.arctan2(np.sqrt(accelerometer_data[0]**2 + accelerometer_data[1]**2), accelerometer_data[2])

    # Convert radians to degrees
    x_rotation_deg = np.degrees(x_rotation)
    y_rotation_deg = np.degrees(y_rotation)
    z_rotation_deg = np.degrees(z_rotation)

    # Determine direction based on rotation angles
    if np.any(x_rotation_deg > 45):
        direction = "Facing Upwards"
    elif np.any(x_rotation_deg < -45):
        direction = "Facing Downwards"
    elif np.any(y_rotation_deg > 45):
        direction = "Facing Right"
    elif np.any(y_rotation_deg < -45):
        direction = "Facing Left"
    elif np.any(z_rotation_deg > 45):
        direction = "Tilting Right"
    elif np.any(z_rotation_deg < -45):
        direction = "Tilting Left"
    else:
        direction = "Facing Forward"

    return activity, direction

activity, direction = determine_activity(gyroscope_data, accelerometer_data, magnetometer_data)
print("Activity:", activity)
print("Direction:", direction)